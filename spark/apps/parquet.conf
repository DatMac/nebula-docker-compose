{
  # Spark configuration
  spark: {
    app: {
      name: NebulaGraph Exchange 3.8.0
    }
    driver: {
      cores: 1
      maxResultSize: 1G
    }
    executor: {
        memory:1G
    }

    cores: {
      max: 4
    }
  }

  # NebulaGraph configuration
  nebula: {
    address:{
      # Specify the IP addresses and ports for Graph and all Meta services.
      # If there are multiple addresses, the format is "ip1:port","ip2:port","ip3:port".
      # Addresses are separated by commas.
      graph:["graphd:9669","graphd1:9669","graphd2:9669"]
      # the address of any of the meta services.
      # if your NebulaGraph server is in virtual network like k8s, please config the leader address of meta.
      meta:["metad0:9559","metad1:9559","metad2:9559"]
    }

    # The account entered must have write permission for the NebulaGraph space.
    user: root
    pswd: nebula
    # Whether to use a password encrypted with RSA.
    # enableRSA: true
    # The key used to encrypt the password using RSA.
    # privateKey: ""

    # Fill in the name of the graph space you want to write data to in the NebulaGraph.
    space: movie_kg
    connection: {
      timeout: 3000
      retry: 3
    }
    execution: {
      retry: 3
    }
    error: {
      max: 32
      output: /tmp/errors
    }
    rate: {
      limit: 1024
      timeout: 1000
    }
  }

  # Processing vertexes
  tags: [
    {
      name: person
      type: {
        source: parquet
        sink: client
      }

      path: "hdfs://namenode:8020/tmp/vertices/person"

      fields: [name, birthdate, nationality]
      nebula.fields: [name, birthdate, nationality]

      vertex: {
        field:personID
      }

      batch: 256
      partition: 32
    }

    {
      name: movie
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/vertices/movie"
      fields: [title, release_year, runtime_in_min, imdb_rating, plot_summary]
      nebula.fields: [title, release_year, runtime_in_min, imdb_rating, plot_summary]
      vertex: {
        field: movieID
      }
      batch: 256
      partition: 32
    }

    {
      name: genre 
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/vertices/genre"
      fields: [name]
      nebula.fields: [name]
      vertex: {
        field: genreID
      }
      batch: 256
      partition: 32
    }

    {
      name: user
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/vertices/user"
      fields: [username, join_date, country]
      nebula.fields: [username, join_date, country]
      vertex: {
        field: userID
      }
      batch: 256
      partition: 32
    }

  ]

  # Processing edges
  edges: [
    {
      name: acted_in
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/edges/acted_in"
      fields: [role]
      nebula.fields: [role]
      source: {
        field: src
      }
      target: {
        field: dst
      }
      batch: 256
      partition: 32
    }

    {
      name: directed
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/edges/directed"
      fields: []
      nebula.fields: []
      source: {
        field: src
      }
      target: {
        field: dst
      }
      batch: 256
      partition: 32
    }

    {
      name: belongs_to
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/edges/belongs_to"
      fields: []
      nebula.fields: []
      source: {
        field: src
      }
      target: {
        field: dst
      }
      batch: 256
      partition: 32
    }
    
    {
      name: rated
      type: {
        source: parquet
        sink: client
      }
      path: "hdfs://namenode:8020/tmp/edges/rated"
      fields: [rating, timestamp]
      nebula.fields: [rating, timestamp]
      source: {
        field: src
      }
      target: {
        field: dst
      }
      batch: 256
      partition: 32
    }
  ]
}
